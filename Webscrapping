from tkinter import *
from tkinter import messagebox
from string import ascii_uppercase
import random
from bs4 import BeautifulSoup
import csv
import requests
import html5lib
import numpy

window = Tk()
window.title("Hangman")
Game_Dictionary = []
The_definition_of_word = []


#Images for Game
photos = [PhotoImage(file="images\hang0.png"),
PhotoImage(file="images\hang1.png"),
PhotoImage(file="images\hang2.png."),
PhotoImage(file="images\hang3.png"),
PhotoImage(file="images\hang4.png"),
PhotoImage(file="images\hang5.png"),
PhotoImage(file="images\hang6.png"),
PhotoImage(file="images\hang7.png"),
PhotoImage(file="images\hang8.png"),
PhotoImage(file="images\hang9.png"),
PhotoImage(file="images\hang10.png"),
PhotoImage(file="images\hang11.png")]

imgLabel =Label(window)
imgLabel.grid(row=0, column=0, columnspan=3, padx=10, pady=40)
imgLabel.config(image=photos[0])

lblWord= StringVar()
Label(window, textvariable=lblWord, font=("Consoles 24 bold")) .grid(row=0, column=3, columnspan=6, padx=10)





#Defintions word_list
game_play = 2
def intro_screen():
    if game_play == 2:
        messagebox.showinfo('Are you ready to begin your vocabulary journey?', 'Click OK to start')
intro_screen()
while game_play < 1:
    def web_page_letters():
        global Word_Search
        global Letter
        URL = "https://www.merriam-webster.com/browse/dictionary/"
        alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
        Letter = random.choice(alphabet)
        Word_Search = URL + Letter
        print(Word_Search)
    web_page_letters()
    r = requests.get(Word_Search)
    soup = BeautifulSoup(r.content, 'html5lib')

    def web_page_numbers():
        global webster_url
        global the_number
        global web_page_number
        for number in soup.find_all('span', attrs= {'class': 'counters'}):
            number =str(number)
            number = str(number[27:-7])
            index_value = len(number)
            if index_value < 8:
                second_number = number[6]
                the_number = (second_number)
                the_number = int(the_number)
            if index_value == 8:
                second_number = number[6]
                second_number_second_digit = number[7]
                the_number = (second_number+second_number_second_digit)
                the_number = int(the_number)
            if index_value > 8:
                second_number = number[6]
                second_number_second_digit = number[7]
                second_number_third_digit = number[8]
                the_number = (second_number + second_number_second_digit+second_number_third_digit)
                the_number = int(the_number)
        web_page_number = random.randrange(1,the_number)
        web_page_number =str(web_page_number)
        webster_url = Word_Search + '/'+web_page_number
        print(webster_url)
    web_page_numbers()
    p = requests.get(webster_url)
    soup3 = BeautifulSoup(p.content, 'html5lib')
    def word_list():
         global word
         for link in soup3.find_all('a'):
            href = link.getText('href')
            if href.startswith(Letter):
                word = href.upper()
                word =word.replace("-","")
                word = word.replace(" ","")
                Game_Dictionary.append(word)
                print(word)
    word_list()
    the_word = random.choice(Game_Dictionary)
    the_word_withSpaces=" ".join(the_word)


    def gameStart():
        global the_word_withSpaces
        global numberOfGuesses
        numberOfGuesses = 0
        imgLabel.config(image=photos[0])
        the_word = random.choice(Game_Dictionary)
        the_word_withSpaces = " ".join(the_word)
        lblWord.set(" ".join("_" * len(the_word)))

        gameStart()


    def guess(letter):
        global numberOfGuesses
        if numberOfGuesses < 11:
            txt = list(the_word_withSpaces)
            guessed = list(lblWord.get())
        if the_word_withSpaces.count(letter) > 0:
            for c in range(len(txt)):
                if txt[c] == letter:
                    guessed[c] = letter
                    lblWord.set("".join(guessed))
                if lblWord.get() == the_word_withSpaces:
                    messagebox.showinfo(("Hangman", "You guessed it!"))
                else:
                    numberOfGuesses += 1
                    imgLabel.config(image=photos[numberOfGuesses])
                if numberOfGuesses == 11:
                    messagebox.showwarning("Hangman", "Game Over!")


            imgLabel = Label(window)
            imgLabel.grid(row=0, column=0, columnspan=3, padx=10, pady=40)
            imgLabel.config(image=photos[0])
            lblWord = StringVar()
            Label(window, textvariable=lblWord, font=("Consoles 24 bold")).grid(row=0, column=3, columnspan=6, padx=10)

    lblWord.set(" ".join("_"*len(the_word)))
    URL2 = "https://www.merriam-webster.com/dictionary/"+the_word
    print(URL2)
    w = requests.get(URL2)
    soup2 = BeautifulSoup(w.content, 'html5lib')
    def definition():
        global The_definition_of_word
        global w
        global soup2
        for link in soup2.findAll('span', attrs= {'class' : 'dtText'}):
            definition_of_word = str(link)
            definition_of_word = definition_of_word [56 :-7]
            The_definition_of_word.append(definition_of_word)
    definition()
    def secondary_definition():
        for term in soup2.findAll('a',attrs={'class':'href'}):
            secondary_defintion_of_word = str(term)
            secondary_defintion_of_word = secondary_defintion_of_word [11:: ]
            The_definition_of_word.append(secondary_defintion_of_word)
    secondary_definition()
    def third_definiition():
        for dic_word in soup2.findAll('em', attrs= {'class': 'mw_t_it'}):
            third_defintion_of_word = str(dic_word)
            third_defintion_of_word = third_defintion_of_word [19:-5]
            The_definition_of_word.append(third_defintion_of_word)
    third_definiition()
    def fourth_definition():
        for word in soup2.findAll('span', attrs= {'class': 'cxl'}):
            fourth_defintion_of_word = str(word)
            The_definition_of_word.append(fourth_defintion_of_word)
    fourth_definition()
    def fifth_definition():
        for words in soup2.findAll('span', attrs= {'class': 'text-uppercase'}):
            fifth_defintion_of_word = str(words)
            fifth_defintion_of_word = fifth_defintion_of_word [17:-7]
            The_definition_of_word.append(fifth_defintion_of_word)
    fifth_definition()
    def sixth_defintion():
        for wordz in soup2.findAll('a', attrs= {'class': 'mw_t_d_link'}):
            sixth_defintion_of_word = str(wordz)
            The_definition_of_word.append(sixth_defintion_of_word)
    sixth_defintion()
    def seventh_defintion():
        for terms in soup2.findAll('a','href'):
            seventh_defintion_of_word = str(terms)
            seventh_defintion_of_word = seventh_defintion_of_word[40:-13]
            The_definition_of_word.append(seventh_defintion_of_word)
    seventh_defintion()
    def eigth_defintion():
        for termz in soup2.findAll('span', attrs= {'class': 'text-uppercase'}):
            eigth_defintion_of_word = str(termz)
            eigth_defintion_of_word = eigth_defintion_of_word [28: -7]
            The_definition_of_word.append(eigth_defintion_of_word)
    eigth_defintion()
    def ninth_defintion():
        for strong in soup2.findAll('strong', atrrs = {'class' : 'href'}):
            ninth_defintion_of_word = str(strong)
            ninth_defintion_of_word = ninth_defintion_of_word [11:-7 ]
            The_definition_of_word.append(ninth_defintion_of_word)
    ninth_defintion()
    game_play = 1
def hint():
    Button(window,text=The_definition_of_word,  font=("Helvetica 10 bold")).grid(row=4, column=1, sticky="NSWE")

def newGame():
    global game_play
    global  numberOfGuesses
    game_play=0
    numberOfGuesses = 0
    imgLabel.config(image=photos[0])
    while game_play < 1:
        def web_page_letters():
            global Word_Search
            global Letter
            URL = "https://www.merriam-webster.com/browse/dictionary/"
            alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
                        't', 'u', 'v', 'w', 'x', 'y', 'z']
            Letter = random.choice(alphabet)
            Word_Search = URL + Letter
            print(Word_Search)

        web_page_letters()
        r = requests.get(Word_Search)
        soup = BeautifulSoup(r.content, 'html5lib')

        def web_page_numbers():
            global webster_url
            global the_number
            global web_page_number
            for number in soup.find_all('span', attrs={'class': 'counters'}):
                number = str(number)
                number = str(number[27:-7])
                index_value = len(number)
                if index_value < 8:
                    second_number = number[6]
                    the_number = (second_number)
                    the_number = int(the_number)
                if index_value == 8:
                    second_number = number[6]
                    second_number_second_digit = number[7]
                    the_number = (second_number + second_number_second_digit)
                    the_number = int(the_number)
                if index_value > 8:
                    second_number = number[6]
                    second_number_second_digit = number[7]
                    second_number_third_digit = number[8]
                    the_number = (second_number + second_number_second_digit + second_number_third_digit)
                    the_number = int(the_number)
            web_page_number = random.randrange(1, the_number)
            web_page_number = str(web_page_number)
            webster_url = Word_Search + '/' + web_page_number
            print(webster_url)

        web_page_numbers()
        p = requests.get(webster_url)
        soup3 = BeautifulSoup(p.content, 'html5lib')

        def word_list():
            global word
            for link in soup3.find_all('a'):
                href = link.getText('href')
                if href.startswith(Letter):
                    word = href.upper()
                    word = word.replace("-", "")
                    word = word.replace(" ", "")
                    Game_Dictionary.append(word)
                    print(word)

        word_list()
        the_word = random.choice(Game_Dictionary)
        the_word_withSpaces = " ".join(the_word)


        def gameStart():
            global the_word_withSpaces
            global numberOfGuesses
            numberOfGuesses = 0
            imgLabel.config(image=photos[0])
            the_word = random.choice(Game_Dictionary)
            the_word_withSpaces = " ".join(the_word)
            lblWord.set(" ".join("_" * len(the_word)))

            gameStart()

        def guess(letter):
            global numberOfGuesses
            if numberOfGuesses < 11:
                txt = list(the_word_withSpaces)
                guessed = list(lblWord.get())
            if the_word_withSpaces.count(letter) > 0:
                for c in range(len(txt)):
                    if txt[c] == letter:
                        guessed[c] = letter
                        lblWord.set("".join(guessed))
                        if lblWord.get() == the_word_withSpaces:
                            messagebox.showinfo(("Hangman", "You guessed it!"))
                        else:
                            numberOfGuesses += 1
                            imgLabel.config(image=photos[numberOfGuesses])
                        if numberOfGuesses == 11:
                            messagebox.showwarning("Hangman", "Game Over!")

                    imgLabel = Label(window)
                    imgLabel.grid(row=0, column=0, columnspan=3, padx=10, pady=40)
                    imgLabel.config(image=photos[0])
                    lblWord = StringVar()
                    Label(window, textvariable=lblWord, font=("Consoles 24 bold")).grid(row=0, column=3, columnspan=6, padx=10)



        lblWord.set(" ".join("_" * len(the_word)))
        URL2 = "https://www.merriam-webster.com/dictionary/" + the_word
        print(URL2)
        w = requests.get(URL2)
        soup2 = BeautifulSoup(w.content, 'html5lib')

        def definition():
            global The_definition_of_word
            global w
            for link in soup2.findAll('span', attrs={'class': 'dtText'}):
                definition_of_word = str(link)
                definition_of_word = definition_of_word[56:-7]
                The_definition_of_word.append(definition_of_word)
        definition()

        def secondary_definition():
            for term in soup2.findAll('a', attrs={'class': 'href'}):
                secondary_defintion_of_word = str(term)
                secondary_defintion_of_word = secondary_defintion_of_word[11::]
                The_definition_of_word.append(secondary_defintion_of_word)

        secondary_definition()

        def third_definiition():
            for dic_word in soup2.findAll('em', attrs={'class': 'mw_t_it'}):
                third_defintion_of_word = str(dic_word)
                third_defintion_of_word = third_defintion_of_word[19:-5]
                The_definition_of_word.append(third_defintion_of_word)

        third_definiition()

        def fourth_definition():
            for word in soup2.findAll('span', attrs={'class': 'cxl'}):
                fourth_defintion_of_word = str(word)
                The_definition_of_word.append(fourth_defintion_of_word)

        fourth_definition()

        def fifth_definition():
            for words in soup2.findAll('span', attrs={'class': 'text-uppercase'}):
                fifth_defintion_of_word = str(words)
                fifth_defintion_of_word = fifth_defintion_of_word[17:-7]
                The_definition_of_word.append(fifth_defintion_of_word)

        fifth_definition()

        def sixth_defintion():
            for wordz in soup2.findAll('a', attrs={'class': 'mw_t_d_link'}):
                sixth_defintion_of_word = str(wordz)
                The_definition_of_word.append(sixth_defintion_of_word)

        sixth_defintion()

        def seventh_defintion():
            for terms in soup2.findAll('a', 'href'):
                seventh_defintion_of_word = str(terms)
                seventh_defintion_of_word = seventh_defintion_of_word[40:-13]
                The_definition_of_word.append(seventh_defintion_of_word)

        seventh_defintion()

        def eigth_defintion():
            for termz in soup2.findAll('span', attrs={'class': 'text-uppercase'}):
                eigth_defintion_of_word = str(termz)
                eigth_defintion_of_word = eigth_defintion_of_word[28: -7]
                The_definition_of_word.append(eigth_defintion_of_word)

        eigth_defintion()

        def ninth_defintion():
            for strong in soup2.findAll('strong', atrrs={'class': 'href'}):
                ninth_defintion_of_word = str(strong)
                ninth_defintion_of_word = ninth_defintion_of_word[11:-7]
                The_definition_of_word.append(ninth_defintion_of_word)

        ninth_defintion()
        game_play = 1


#Create keyboard for alphabet
n=0
for c in ascii_uppercase:
    Button(window, text=c, command=lambda c=c: guess(letter=c),font=("Helvetica 18"), width=4) .grid(row=1+n//9, column=n%9,sticky="NSWE")
    n+=1

Button(window, text="New\nGame", command=lambda :newGame(), font=("Helvetica 10 bold")).grid(row=3, column=8, sticky="NSWE")

Button(window,text="Hint",command=lambda  :hint(), font=("Helvetica 10 bold")).grid(row=4, column=9, sticky="NSWE")

newGame()
window.mainloop()
